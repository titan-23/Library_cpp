<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classtitan23_1_1DualCommutativeSegmentTree" kind="class" language="C++" prot="public">
    <compoundname>titan23::DualCommutativeSegmentTree</compoundname>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class F</type>
      </param>
      <param>
        <type>T(*)(F, T)</type>
        <declname>mapping</declname>
        <defname>mapping</defname>
      </param>
      <param>
        <type>F(*)(F, F)</type>
        <declname>composition</declname>
        <defname>composition</defname>
      </param>
      <param>
        <type>T(*)()</type>
        <declname>e</declname>
        <defname>e</defname>
      </param>
      <param>
        <type>F(*)()</type>
        <declname>id</declname>
        <defname>id</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtitan23_1_1DualCommutativeSegmentTree_1ae5ed3714e9ad22f16a21abf7c51ac7c8" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::_n</definition>
        <argsstring></argsstring>
        <name>_n</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="21" column="9" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtitan23_1_1DualCommutativeSegmentTree_1a48bbede973908ecc53406565f12683c7" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::_size</definition>
        <argsstring></argsstring>
        <name>_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="21" column="12" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtitan23_1_1DualCommutativeSegmentTree_1ae7db126cdc4992d5a2e7f8fd6fc21402" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::_log</definition>
        <argsstring></argsstring>
        <name>_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="21" column="18" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtitan23_1_1DualCommutativeSegmentTree_1ada4b0ba37ada4d06018233d7176eaa90" prot="private" static="no" mutable="no">
        <type>vector&lt; T &gt;</type>
        <definition>vector&lt;T&gt; titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::_data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="22" column="12" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtitan23_1_1DualCommutativeSegmentTree_1a24d04b9a3ca2d5cfe833c58d8b8c628c" prot="private" static="no" mutable="no">
        <type>vector&lt; T &gt;</type>
        <definition>vector&lt;T&gt; titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::_lazy</definition>
        <argsstring></argsstring>
        <name>_lazy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="22" column="18" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1a3958b8edfb7039760312f9923f03442f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::_build</definition>
        <argsstring>(const int n)</argsstring>
        <name>_build</name>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="24" column="10" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="24" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1a9ad8140e37dc4094a270e8ed638965b2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::_all_apply</definition>
        <argsstring>(int k, F f)</argsstring>
        <name>_all_apply</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="32" column="10" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="32" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1aa1c6094bfd097468e0c3c250bfc6e302" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::_propagate</definition>
        <argsstring>(const int k)</argsstring>
        <name>_propagate</name>
        <param>
          <type>const int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="43" column="10" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="43" bodyend="47"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1a076ac87e78fe03d8f4c5df3051525113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::DualCommutativeSegmentTree</definition>
        <argsstring>()</argsstring>
        <name>DualCommutativeSegmentTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="50" column="5" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1a92c7166d4a678ff260ecb13e1c179b7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::DualCommutativeSegmentTree</definition>
        <argsstring>(const int n)</argsstring>
        <name>DualCommutativeSegmentTree</name>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="52" column="5" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1a189093383051330b19aa2385416496bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::DualCommutativeSegmentTree</definition>
        <argsstring>(const vector&lt; T &gt; &amp;a)</argsstring>
        <name>DualCommutativeSegmentTree</name>
        <param>
          <type>const vector&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="56" column="5" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="56" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1a7a913f56a223afd6a9a5b522635aa8fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::apply_point</definition>
        <argsstring>(int k, F f)</argsstring>
        <name>apply_point</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="64" column="10" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1a4fdf9d4d1ea15e1d7dc1474a8b125247" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::apply</definition>
        <argsstring>(int l, int r, const F f)</argsstring>
        <name>apply</name>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="68" column="10" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="68" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1ac6f5d9032ad7910d36d94c4d31e5746a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::all_apply</definition>
        <argsstring>(F f)</argsstring>
        <name>all_apply</name>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="97" column="10" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1aec32d6adc63c7d464c3df95d00a76814" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::all_propagate</definition>
        <argsstring>()</argsstring>
        <name>all_propagate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="101" column="10" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1aac07fe59294d8af90c7c15d0ec4c68cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; T &gt;</type>
        <definition>vector&lt;T&gt; titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::tovector</definition>
        <argsstring>() const</argsstring>
        <name>tovector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="107" column="12" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1aa4a7d4cf306bb1c2400c94ad0496f52c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::get</definition>
        <argsstring>(int k) const</argsstring>
        <name>get</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="113" column="7" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="113" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1a49170c251e03cf16590c902e6bd27e8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::set</definition>
        <argsstring>(int k, T v)</argsstring>
        <name>set</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="123" column="10" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="123" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DualCommutativeSegmentTree_1ae00604f1c883beec6cb7b260f419d9e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DualCommutativeSegmentTree&lt; T, F, mapping, composition, e, id &gt;::print</definition>
        <argsstring>()</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="132" column="10" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="132" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>作用が可換な双対セグ木 </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" line="19" column="3" bodyfile="titan_cpplib_expanded/data_structures/dual_commutative_segment_tree.cpp" bodystart="19" bodyend="142"/>
    <listofallmembers>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1a9ad8140e37dc4094a270e8ed638965b2" prot="private" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>_all_apply</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1a3958b8edfb7039760312f9923f03442f" prot="private" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>_build</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1ada4b0ba37ada4d06018233d7176eaa90" prot="private" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>_data</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1a24d04b9a3ca2d5cfe833c58d8b8c628c" prot="private" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>_lazy</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1ae7db126cdc4992d5a2e7f8fd6fc21402" prot="private" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>_log</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1ae5ed3714e9ad22f16a21abf7c51ac7c8" prot="private" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>_n</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1aa1c6094bfd097468e0c3c250bfc6e302" prot="private" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>_propagate</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1a48bbede973908ecc53406565f12683c7" prot="private" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>_size</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1ac6f5d9032ad7910d36d94c4d31e5746a" prot="public" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>all_apply</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1aec32d6adc63c7d464c3df95d00a76814" prot="public" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>all_propagate</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1a4fdf9d4d1ea15e1d7dc1474a8b125247" prot="public" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>apply</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1a7a913f56a223afd6a9a5b522635aa8fd" prot="public" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>apply_point</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1a076ac87e78fe03d8f4c5df3051525113" prot="public" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>DualCommutativeSegmentTree</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1a92c7166d4a678ff260ecb13e1c179b7b" prot="public" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>DualCommutativeSegmentTree</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1a189093383051330b19aa2385416496bc" prot="public" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>DualCommutativeSegmentTree</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1aa4a7d4cf306bb1c2400c94ad0496f52c" prot="public" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>get</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1ae00604f1c883beec6cb7b260f419d9e0" prot="public" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>print</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1a49170c251e03cf16590c902e6bd27e8f" prot="public" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>set</name></member>
      <member refid="classtitan23_1_1DualCommutativeSegmentTree_1aac07fe59294d8af90c7c15d0ec4c68cd" prot="public" virt="non-virtual"><scope>titan23::DualCommutativeSegmentTree</scope><name>tovector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

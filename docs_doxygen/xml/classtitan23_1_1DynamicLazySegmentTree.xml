<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classtitan23_1_1DynamicLazySegmentTree" kind="class" language="C++" prot="public">
    <compoundname>titan23::DynamicLazySegmentTree</compoundname>
    <innerclass refid="structtitan23_1_1DynamicLazySegmentTree_1_1Node" prot="private">titan23::DynamicLazySegmentTree::Node</innerclass>
    <templateparamlist>
      <param>
        <type>class IndexType</type>
      </param>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>T(*)(T, T)</type>
        <declname>op</declname>
        <defname>op</defname>
      </param>
      <param>
        <type>T(*)()</type>
        <declname>e</declname>
        <defname>e</defname>
      </param>
      <param>
        <type>class F</type>
      </param>
      <param>
        <type>T(*)(F, T)</type>
        <declname>mapping</declname>
        <defname>mapping</defname>
      </param>
      <param>
        <type>F(*)(F, F)</type>
        <declname>composition</declname>
        <defname>composition</defname>
      </param>
      <param>
        <type>F(*)()</type>
        <declname>id</declname>
        <defname>id</defname>
      </param>
      <param>
        <type>T(*)(T, IndexType)</type>
        <declname>pow</declname>
        <defname>pow</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtitan23_1_1DynamicLazySegmentTree_1a889b32081aaba0a312d8cd603c13efed" prot="private" static="no">
        <type>Node *</type>
        <definition>using titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::NodePtr =  Node*</definition>
        <argsstring></argsstring>
        <name>NodePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="42" column="9" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtitan23_1_1DynamicLazySegmentTree_1a37020b8bdaf881eba51f4fbffa583673" prot="private" static="no" mutable="no">
        <type>NodePtr</type>
        <definition>NodePtr titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::root</definition>
        <argsstring></argsstring>
        <name>root</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="44" column="17" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtitan23_1_1DynamicLazySegmentTree_1a00848ecda4f0d22e1e6c8251c046ea4d" prot="private" static="no" mutable="no">
        <type>IndexType</type>
        <definition>IndexType titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::u</definition>
        <argsstring></argsstring>
        <name>u</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="45" column="19" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1a2eb981d9be76d9c8cb67d375ab79c38b" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::bit_length</definition>
        <argsstring>(long long x)</argsstring>
        <name>bit_length</name>
        <param>
          <type>long long</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="37" column="20" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="37" bodyend="39"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1ad5699df181912813a778234ac438dbd7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::inner_prod</definition>
        <argsstring>(NodePtr node, IndexType l, IndexType r)</argsstring>
        <name>inner_prod</name>
        <param>
          <type>NodePtr</type>
          <declname>node</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>l</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="109" column="11" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="109" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1a115f0726a3b11c5e225717d299bb2d2d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::inner_apply</definition>
        <argsstring>(NodePtr node, IndexType l, IndexType r, F f)</argsstring>
        <name>inner_apply</name>
        <param>
          <type>NodePtr</type>
          <declname>node</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>l</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>r</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="120" column="14" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="120" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1aba6e553be0cdceab9ee00746c4c57685" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::inner_set</definition>
        <argsstring>(NodePtr node, IndexType k, T val)</argsstring>
        <name>inner_set</name>
        <param>
          <type>NodePtr</type>
          <declname>node</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="132" column="14" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="132" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1ae0e559d6844106b2f6cb9bdff464fa78" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::inner_get</definition>
        <argsstring>(NodePtr node, IndexType k)</argsstring>
        <name>inner_get</name>
        <param>
          <type>NodePtr</type>
          <declname>node</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="150" column="11" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="150" bodyend="167"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1a996742f7b789c7a865fd1e748941b951" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::DynamicLazySegmentTree</definition>
        <argsstring>()</argsstring>
        <name>DynamicLazySegmentTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="171" column="9" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1ac731f105e49158960c839b7b08cab6c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::DynamicLazySegmentTree</definition>
        <argsstring>(const IndexType u_)</argsstring>
        <name>DynamicLazySegmentTree</name>
        <param>
          <type>const IndexType</type>
          <declname>u_</declname>
        </param>
        <briefdescription>
<para>初期値 <computeroutput>e()</computeroutput> , <computeroutput>[0, u)</computeroutput> の区間を管理する <computeroutput><ref refid="classtitan23_1_1DynamicLazySegmentTree" kindref="compound">DynamicLazySegmentTree</ref></computeroutput> を作成する </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="174" column="9" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="174" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1aa2effc7768b5a0d0756e1a5ae193d9e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::DynamicLazySegmentTree</definition>
        <argsstring>(const IndexType u_, const T init)</argsstring>
        <name>DynamicLazySegmentTree</name>
        <param>
          <type>const IndexType</type>
          <declname>u_</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>初期値 <computeroutput>init</computeroutput> , <computeroutput>[0, u)</computeroutput> の区間を管理する <computeroutput><ref refid="classtitan23_1_1DynamicLazySegmentTree" kindref="compound">DynamicLazySegmentTree</ref></computeroutput> を作成する </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="181" column="9" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1ae1495e133409e2bf892949a32c4b5c3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::prod</definition>
        <argsstring>(IndexType l, IndexType r)</argsstring>
        <name>prod</name>
        <param>
          <type>IndexType</type>
          <declname>l</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para><computeroutput>[l, r)</computeroutput> の集約値を返す / <computeroutput>O(logu)</computeroutput> time, <computeroutput>O(1)</computeroutput> space </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="188" column="11" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1a8a9d9bb560f5079aabc97246d97472a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::apply</definition>
        <argsstring>(IndexType l, IndexType r, F f)</argsstring>
        <name>apply</name>
        <param>
          <type>IndexType</type>
          <declname>l</declname>
        </param>
        <param>
          <type>IndexType</type>
          <declname>r</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para><computeroutput>[l, r)</computeroutput> に <computeroutput>f</computeroutput> を作用させる / <computeroutput>O(logu)</computeroutput> time, <computeroutput>O(logu)</computeroutput> space </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="194" column="14" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1ade68f18b226ef8fbd3bf3945c8a6d887" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::get</definition>
        <argsstring>(IndexType k)</argsstring>
        <name>get</name>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para><computeroutput>k</computeroutput> 番目の値を取得する / <computeroutput>O(logu)</computeroutput> time, <computeroutput>O(1)</computeroutput> space </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="200" column="11" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1a536dbb44d97de5ebecf0f80b06508337" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::set</definition>
        <argsstring>(IndexType k, T val)</argsstring>
        <name>set</name>
        <param>
          <type>IndexType</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para><computeroutput>k</computeroutput> 番目の値を <computeroutput>val</computeroutput> に更新する / <computeroutput>O(logu)</computeroutput> time, <computeroutput>O(logu)</computeroutput> space </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="205" column="14" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1DynamicLazySegmentTree_1a45950f749b0699d98f134a32487326b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::DynamicLazySegmentTree&lt; IndexType, T, op, e, F, mapping, composition, id, pow &gt;::print</definition>
        <argsstring>()</argsstring>
        <name>print</name>
        <briefdescription>
<para>適当に表示する </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="211" column="14" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="211" bodyend="216"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput>[0, u)</computeroutput> の列を管理する、必要なところだけ作る遅延セグ木 </para>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>apply / set : <computeroutput>O(logu)</computeroutput> time, <computeroutput>O(logu)</computeroutput> space</para>
</listitem><listitem><para>prod / get : <computeroutput>O(logu)</computeroutput> time, <computeroutput>O(1)</computeroutput> space</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IndexType</parametername>
</parameternamelist>
<parameterdescription>
<para>添え字を表すインデックス long long を推奨 和がオーバーフローしないことが条件かな </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>モノイドの型 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(*op)(T</parametername>
<parametername>T)</parametername>
</parameternamelist>
<parameterdescription>
<para>モノイドの2項演算 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(*e)()</parametername>
</parameternamelist>
<parameterdescription>
<para>モノイドの単位元 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>作用素の型 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(*mapping)(F</parametername>
<parametername>T)</parametername>
</parameternamelist>
<parameterdescription>
<para>遅延セグ木のアレ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(*composition)(F</parametername>
<parametername>F)</parametername>
</parameternamelist>
<parameterdescription>
<para>遅延セグ木のアレ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(*id)()</parametername>
</parameternamelist>
<parameterdescription>
<para>遅延セグ木のアレ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>(*pow)(T</parametername>
<parametername>IndexType)</parametername>
</parameternamelist>
<parameterdescription>
<para>T=op(T,T)をk回繰り返した結果を返す関数 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" line="35" column="5" bodyfile="titan_cpplib/data_structures/dynamic_lazy_segment_tree.cpp" bodystart="35" bodyend="217"/>
    <listofallmembers>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1a8a9d9bb560f5079aabc97246d97472a9" prot="public" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>apply</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1a2eb981d9be76d9c8cb67d375ab79c38b" prot="private" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>bit_length</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1a996742f7b789c7a865fd1e748941b951" prot="public" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>DynamicLazySegmentTree</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1ac731f105e49158960c839b7b08cab6c8" prot="public" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>DynamicLazySegmentTree</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1aa2effc7768b5a0d0756e1a5ae193d9e1" prot="public" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>DynamicLazySegmentTree</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1ade68f18b226ef8fbd3bf3945c8a6d887" prot="public" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>get</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1a115f0726a3b11c5e225717d299bb2d2d" prot="private" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>inner_apply</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1ae0e559d6844106b2f6cb9bdff464fa78" prot="private" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>inner_get</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1ad5699df181912813a778234ac438dbd7" prot="private" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>inner_prod</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1aba6e553be0cdceab9ee00746c4c57685" prot="private" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>inner_set</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1a889b32081aaba0a312d8cd603c13efed" prot="private" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>NodePtr</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1a45950f749b0699d98f134a32487326b9" prot="public" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>print</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1ae1495e133409e2bf892949a32c4b5c3f" prot="public" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>prod</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1a37020b8bdaf881eba51f4fbffa583673" prot="private" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>root</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1a536dbb44d97de5ebecf0f80b06508337" prot="public" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>set</name></member>
      <member refid="classtitan23_1_1DynamicLazySegmentTree_1a00848ecda4f0d22e1e6c8251c046ea4d" prot="private" virt="non-virtual"><scope>titan23::DynamicLazySegmentTree</scope><name>u</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

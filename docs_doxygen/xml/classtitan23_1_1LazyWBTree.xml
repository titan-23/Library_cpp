<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classtitan23_1_1LazyWBTree" kind="class" language="C++" prot="public">
    <compoundname>titan23::LazyWBTree</compoundname>
    <innerclass refid="classtitan23_1_1LazyWBTree_1_1Node" prot="private">titan23::LazyWBTree::Node</innerclass>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class F</type>
      </param>
      <param>
        <type>T(*)(T, T)</type>
        <declname>op</declname>
        <defname>op</defname>
      </param>
      <param>
        <type>T(*)(F, T)</type>
        <declname>mapping</declname>
        <defname>mapping</defname>
      </param>
      <param>
        <type>F(*)(F, F)</type>
        <declname>composition</declname>
        <defname>composition</defname>
      </param>
      <param>
        <type>T(*)()</type>
        <declname>e</declname>
        <defname>e</defname>
      </param>
      <param>
        <type>F(*)()</type>
        <declname>id</declname>
        <defname>id</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtitan23_1_1LazyWBTree_1a7528d09e3e012e434e01a2e23b49f339" prot="private" static="no">
        <type>Node *</type>
        <definition>using titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::NodePtr =  Node*</definition>
        <argsstring></argsstring>
        <name>NodePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="22" column="5" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtitan23_1_1LazyWBTree_1ab686b419fb04b216b4cfaecb450ce84e" prot="private" static="no">
        <type><ref refid="classtitan23_1_1LazyWBTree" kindref="compound">LazyWBTree</ref>&lt; T, F, op, mapping, composition, e, id &gt;</type>
        <definition>using titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::MyLazyWBTree =  LazyWBTree&lt;T, F, op, mapping, composition, e, id&gt;</definition>
        <argsstring></argsstring>
        <name>MyLazyWBTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="23" column="5" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classtitan23_1_1LazyWBTree_1a076541523615e050ac477991a6f55f6b" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::ALPHA</definition>
        <argsstring></argsstring>
        <name>ALPHA</name>
        <initializer>= 1 - sqrt(2) / 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="24" column="29" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtitan23_1_1LazyWBTree_1a7bd6717081a858ff9d34a5d7e22c9865" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::BETA</definition>
        <argsstring></argsstring>
        <name>BETA</name>
        <initializer>= (1 - 2 * ALPHA) / (1 - ALPHA)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="25" column="29" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classtitan23_1_1LazyWBTree_1a72d1aba6041aaf8a2b40b106d3cf6584" prot="public" static="no" mutable="no">
        <type>NodePtr</type>
        <definition>NodePtr titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::root</definition>
        <argsstring></argsstring>
        <name>root</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="241" column="13" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="241" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a5ba5279e09a89a481553ba6dcd12d349" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::_build</definition>
        <argsstring>(vector&lt; T &gt; const &amp;a)</argsstring>
        <name>_build</name>
        <param>
          <type>vector&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="87" column="10" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="87" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a43286a996fd7224057880d6a5738d484" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodePtr</type>
        <definition>NodePtr titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::_rotate_right</definition>
        <argsstring>(NodePtr node)</argsstring>
        <name>_rotate_right</name>
        <param>
          <type>NodePtr</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="99" column="13" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="99" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a952fb89beb64279d860c7219d42e3043" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodePtr</type>
        <definition>NodePtr titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::_rotate_left</definition>
        <argsstring>(NodePtr node)</argsstring>
        <name>_rotate_left</name>
        <param>
          <type>NodePtr</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="108" column="13" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="108" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1ab9be4f043cb54163f9ad5edcc1a44d6b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodePtr</type>
        <definition>NodePtr titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::_balance_left</definition>
        <argsstring>(NodePtr node)</argsstring>
        <name>_balance_left</name>
        <param>
          <type>NodePtr</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="117" column="13" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="117" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a69b7ed386e5f0b54d05bb7382ff733bd" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodePtr</type>
        <definition>NodePtr titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::_balance_right</definition>
        <argsstring>(NodePtr node)</argsstring>
        <name>_balance_right</name>
        <param>
          <type>NodePtr</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="127" column="13" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="127" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1ad5930b29e8793466290335024625a807" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodePtr</type>
        <definition>NodePtr titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::_merge_with_root</definition>
        <argsstring>(NodePtr l, NodePtr root, NodePtr r)</argsstring>
        <name>_merge_with_root</name>
        <param>
          <type>NodePtr</type>
          <declname>l</declname>
        </param>
        <param>
          <type>NodePtr</type>
          <declname>root</declname>
        </param>
        <param>
          <type>NodePtr</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="137" column="13" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="137" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a180490903f0115ca570f191dd6f9e251" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pair&lt; NodePtr, NodePtr &gt;</type>
        <definition>pair&lt;NodePtr, NodePtr&gt; titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::_pop_right</definition>
        <argsstring>(NodePtr node)</argsstring>
        <name>_pop_right</name>
        <param>
          <type>NodePtr</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="165" column="10" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="165" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a370bef038c41164c00c568b76ae12026" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NodePtr</type>
        <definition>NodePtr titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::_merge_node</definition>
        <argsstring>(NodePtr l, NodePtr r)</argsstring>
        <name>_merge_node</name>
        <param>
          <type>NodePtr</type>
          <declname>l</declname>
        </param>
        <param>
          <type>NodePtr</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="207" column="13" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="207" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1ae47a8f8c5f5e3479595b38978e9f8486" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pair&lt; NodePtr, NodePtr &gt;</type>
        <definition>pair&lt;NodePtr, NodePtr&gt; titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::_split_node</definition>
        <argsstring>(NodePtr node, int k)</argsstring>
        <name>_split_node</name>
        <param>
          <type>NodePtr</type>
          <declname>node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="215" column="10" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="215" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a7c8dd6aa7eb9fbcb279e31984d2103e7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtitan23_1_1LazyWBTree" kindref="compound">LazyWBTree</ref></type>
        <definition>LazyWBTree titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::_new</definition>
        <argsstring>(NodePtr root)</argsstring>
        <name>_new</name>
        <param>
          <type>NodePtr</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="232" column="16" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1aa53efc113de7a8315f50b63502ef6f31" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::LazyWBTree</definition>
        <argsstring>(NodePtr &amp;root)</argsstring>
        <name>LazyWBTree</name>
        <param>
          <type>NodePtr &amp;</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="237" column="5" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="237" bodyend="237"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1ac9bb6a5607b27bf65dede6b5ca52eadc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::LazyWBTree</definition>
        <argsstring>()</argsstring>
        <name>LazyWBTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="243" column="5" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="243" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a083067023d1acd0442cba9e10cef00c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::LazyWBTree</definition>
        <argsstring>(vector&lt; T &gt; const &amp;a)</argsstring>
        <name>LazyWBTree</name>
        <param>
          <type>vector&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="245" column="5" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="245" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a586e577c7550fcf00ed669815e08a511" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::merge</definition>
        <argsstring>(MyLazyWBTree &amp;other)</argsstring>
        <name>merge</name>
        <param>
          <type><ref refid="classtitan23_1_1LazyWBTree" kindref="compound">MyLazyWBTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="247" column="10" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="247" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a008789fa4a8b5a9c3d73502d81abbe90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pair&lt; <ref refid="classtitan23_1_1LazyWBTree" kindref="compound">MyLazyWBTree</ref>, <ref refid="classtitan23_1_1LazyWBTree" kindref="compound">MyLazyWBTree</ref> &gt;</type>
        <definition>pair&lt;MyLazyWBTree, MyLazyWBTree&gt; titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::split</definition>
        <argsstring>(const int k)</argsstring>
        <name>split</name>
        <param>
          <type>const int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="251" column="10" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a53603fd5c1ef8d9796a74dcf4575ffd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::apply</definition>
        <argsstring>(const int l, const int r, const F f)</argsstring>
        <name>apply</name>
        <param>
          <type>const int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="256" column="10" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="256" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a5754af1b3d6a506714abec3eb8c871c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::prod</definition>
        <argsstring>(const int l, const int r)</argsstring>
        <name>prod</name>
        <param>
          <type>const int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="266" column="7" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="266" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1ac5eba2a21a0105f830106690e23dcfff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::insert</definition>
        <argsstring>(int k, const T key)</argsstring>
        <name>insert</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="275" column="10" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="275" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a3199c1864f09a4ad154fd0aa8bff6e7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::pop</definition>
        <argsstring>(int k)</argsstring>
        <name>pop</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="281" column="7" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="281" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a9c7cf62b32c811294d484f0b644ffeb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::reverse</definition>
        <argsstring>(const int l, const int r)</argsstring>
        <name>reverse</name>
        <param>
          <type>const int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="356" column="10" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="356" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a44b784afcbb4135268841e07193020cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>vector&lt; T &gt;</type>
        <definition>vector&lt;T&gt; titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::tovector</definition>
        <argsstring>()</argsstring>
        <name>tovector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="364" column="12" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="364" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a124edeb89623fc0e6c1eae9e024c03ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::set</definition>
        <argsstring>(int k, T v)</argsstring>
        <name>set</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="384" column="10" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="384" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a66bcadcb9d6439a3ac5cbbb5ed9f6ff4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::get</definition>
        <argsstring>(int k)</argsstring>
        <name>get</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="420" column="7" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="420" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1ad08f895cd61cfd82e370143df7d7f899" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::print</definition>
        <argsstring>()</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="439" column="10" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="439" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1a30e936f24ae6d6f848bdf8110b9edf40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::len</definition>
        <argsstring>() const</argsstring>
        <name>len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="449" column="9" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="449" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classtitan23_1_1LazyWBTree_1aa3e9dd8d1bbee5b10b12a3d72caabe69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::isok</definition>
        <argsstring>()</argsstring>
        <name>isok</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="453" column="10" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="453" bodyend="479"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;::Node</label>
        <childnode refid="2" relation="usage">
          <edgelabel>left</edgelabel>
          <edgelabel>right</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>titan23::LazyWBTree&lt; T, F, op, mapping, composition, e, id &gt;</label>
        <link refid="classtitan23_1_1LazyWBTree"/>
        <childnode refid="2" relation="usage">
          <edgelabel>root</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" line="18" column="3" bodyfile="titan_cpplib_expanded/data_structures/lazy_wb_tree.cpp" bodystart="18" bodyend="480"/>
    <listofallmembers>
      <member refid="classtitan23_1_1LazyWBTree_1ab9be4f043cb54163f9ad5edcc1a44d6b" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>_balance_left</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a69b7ed386e5f0b54d05bb7382ff733bd" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>_balance_right</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a5ba5279e09a89a481553ba6dcd12d349" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>_build</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a370bef038c41164c00c568b76ae12026" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>_merge_node</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1ad5930b29e8793466290335024625a807" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>_merge_with_root</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a7c8dd6aa7eb9fbcb279e31984d2103e7" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>_new</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a180490903f0115ca570f191dd6f9e251" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>_pop_right</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a952fb89beb64279d860c7219d42e3043" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>_rotate_left</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a43286a996fd7224057880d6a5738d484" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>_rotate_right</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1ae47a8f8c5f5e3479595b38978e9f8486" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>_split_node</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a076541523615e050ac477991a6f55f6b" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>ALPHA</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a53603fd5c1ef8d9796a74dcf4575ffd6" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>apply</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a7bd6717081a858ff9d34a5d7e22c9865" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>BETA</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a66bcadcb9d6439a3ac5cbbb5ed9f6ff4" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>get</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1ac5eba2a21a0105f830106690e23dcfff" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>insert</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1aa3e9dd8d1bbee5b10b12a3d72caabe69" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>isok</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1aa53efc113de7a8315f50b63502ef6f31" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>LazyWBTree</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1ac9bb6a5607b27bf65dede6b5ca52eadc" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>LazyWBTree</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a083067023d1acd0442cba9e10cef00c9" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>LazyWBTree</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a30e936f24ae6d6f848bdf8110b9edf40" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>len</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a586e577c7550fcf00ed669815e08a511" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>merge</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1ab686b419fb04b216b4cfaecb450ce84e" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>MyLazyWBTree</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a7528d09e3e012e434e01a2e23b49f339" prot="private" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>NodePtr</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a3199c1864f09a4ad154fd0aa8bff6e7a" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>pop</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1ad08f895cd61cfd82e370143df7d7f899" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>print</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a5754af1b3d6a506714abec3eb8c871c7" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>prod</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a9c7cf62b32c811294d484f0b644ffeb4" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>reverse</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a72d1aba6041aaf8a2b40b106d3cf6584" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>root</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a124edeb89623fc0e6c1eae9e024c03ec" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>set</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a008789fa4a8b5a9c3d73502d81abbe90" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>split</name></member>
      <member refid="classtitan23_1_1LazyWBTree_1a44b784afcbb4135268841e07193020cb" prot="public" virt="non-virtual"><scope>titan23::LazyWBTree</scope><name>tovector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
